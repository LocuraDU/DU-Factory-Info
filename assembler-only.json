{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"border = 570\ncolumn = {10, 522}\ncol_exp = \"\"\n\nc = 1\nposy = 60\nShow_name = false --export: Shows Display name if checked<br> i.e How you named TU\nmax = 10\n\n\nf_color ={\n    \"setNextFillColor(layer, 0,1,0,1) \", -- green 1\n    \"setNextFillColor(layer, 1,0,0,1) \", -- red 2\n    \"setNextFillColor(layer, 0,0,1,1) \", -- blue 3\n    \"setNextFillColor(layer, 1,1,0,1) \", -- yellow 4\n    \"setNextFillColor(layer, 1,.5,0,1) \", -- orange 5\n    \"setNextFillColor(layer, 1,1,1,1) \", -- white 6\n    \"setNextFillColor(layer, 1,0,.5,1) \" -- pink 7\n    }\n\nfor i=1,#column do col_exp = col_exp .. tostring(column[i]) .. \",\" end\n\nt_state = function(fid,ax,ay)\n    if Show_name then tu_name = core.getElementNameById(fid) else tu_name = core.getElementDisplayNameById(fid) end \n    \n    state = core.getElementIndustryInfoById(fid)[\"state\"]\n\n    if state == 1 then return \"setNextFillColor(layer, 1,0,0,1) addText(layer, font, \\\"Stopped\\\", \" .. ax .. \", \" .. ay .. \")\\n\"\n    elseif state == 2 then return \"setNextFillColor(layer, 0,1,0,1) addText(layer, font, \\\"Running\\\", \" .. ax .. \", \" .. ay .. \")\\n\"\n    elseif state == 3 then return \"setNextFillColor(layer, 1,0,.5,1) addText(layer, font, \\\"Missing Ingredient\\\", \" .. ax .. \", \" .. ay .. \")\\n\"\n    elseif state == 4 then return \"setNextFillColor(layer, 1,.5,0,1) addText(layer, font, \\\"Output Full\\\", \" .. ax .. \", \" .. ay .. \")\\n\"\n    elseif state == 5 then return \"setNextFillColor(layer, 1,0,/5,1) addText(layer, font, \\\"No Output Container\\\", \" .. ax .. \", \" .. ay .. \")\\n\"\n    elseif state == 6 then return \"setNextFillColor(layer, 0,.4,1,1) addText(layer, font, \\\"Pending\\\", \" .. ax .. \", \" .. ay .. \")\\n\"\n    elseif state == 7 then return \"Missing schematics\"\n    else return \" - WTF?\"\n    end\nend\n\n--t_name = function(fid)\n--    if Show_name then tu_name = core.getElementNameById(fid) else tu_name = core.getElementDisplayNameById(fid) end\n--    return tu_name\n--end\n\n---- substitution list, credits to Squizz Cephinator\nlocal ntxt = \"\"\nfunction getName(ntxt)           \n        ntxt = ntxt:gsub(\" xs$\", \" XS\")\n        ntxt = ntxt:gsub(\" s$\", \" S \")\n        ntxt = ntxt:gsub(\" m$\", \" M \")\n        ntxt = ntxt:gsub(\" l$\", \" L \")\n        ntxt = ntxt:gsub(\" xl$\", \" XL \")\n        ntxt = ntxt:gsub(\" xxl$\", \" XXL \")\n        ntxt = ntxt:gsub(\" xxxl$\", \" XXXL \")\n        ntxt = ntxt:gsub(\" gate \", \" Gate \") \n    return ntxt\nend\n\np_name = function(fid)\n   test = core.getElementIndustryInfoById(fid)[\"currentProducts\"] \n   if test[1]==nil then product = \"NOT ASSIGNED\" else \n    pid = core.getElementIndustryInfoById(fid)[\"currentProducts\"][1][\"id\"]\n    product = string.sub(system.getItem(pid)[\"displayNameWithSize\"],1,60)\n    end   \n    return product\nend\n\nt_stats = function(fid,ax,ay)\n    test = core.getElementIndustryInfoById(fid)[\"currentProducts\"] \n   if test[1]==nil then maintain = \"-----\" batch = \"-----\" else \n    maintain = core.getElementIndustryInfoById(fid)[\"maintainProductAmount\"]\n    batch = core.getElementIndustryInfoById(fid)[\"currentProducts\"][1][\"quantity\"]\n    end\n    \n    return \"setNextFillColor(layer, .6,.6,.6,1) addText(layer, font, \\\"M: \".. maintain .. \" \\\", \" .. ax .. \", \" .. ay .. \")\\n\"\nend\n\naddTxt = function(txt,px,py,col)\n    return col .. \" addText(layer, font, \\\"\".. txt .. \"\\\",\" .. px ..\", \".. py..\")\\n\"\nend    \n\ntu_column = function(posx, posy, ind, max)\nif transfer_units[1] == 0 then return \"\" else \n    local stxt = \"\"\n        \n --   for index,id in ipairs(transfer_units) do\n      for index = ind, math.min(#transfer_units,max) do\n         id = transfer_units[index]\n        if index<10 then num= \"00\" .. tostring(index) \n         elseif index<100 then num= \"0\" .. tostring(index) \n         else num = tostring(index) end\n         if posy == border then posy=60 c=2 end       \n         if posy > border and c==2 then c=1 end\n        \n        stxt = stxt .. addTxt(num,column[c],posy, \"\")\n        stxt = stxt .. addTxt(getName(p_name(id)), column[c]+30, posy, f_color[6])\n        stxt = stxt .. t_state(id,column[c]+320,posy)\n        stxt = stxt .. t_stats(id,column[c]+430,posy)\n            \n        posy = posy + 15\n     end    \n    return stxt\nend\nend        \n\nscr_num=1\n\nscreen_1 = [[\nlocal layer = createLayer()\nlocal back=createLayer()\nsetDefaultStrokeColor(back,Shape_Line,0,0,0,0.5)\nsetDefaultShadow(back,Shape_Line,6,0,0,0,0.5)\nlocal front=createLayer()\nsetDefaultFillColor(front,Shape_Box,0.075,0.125,0.156,1)\nsetDefaultFillColor(front,Shape_Text,0.710,0.878,0.941,1)\nsetDefaultTextAlign(front,AlignH_Left,AlignV_Middle)\nlocal rx, ry = getResolution()\nsetBackgroundColor(15/255,24/255,29/255)\nlocal font = loadFont(\"RobotoCondensed\", 12)\nlocal font2 = loadFont(\"Oxanium-Medium\", 20)\nlocal font3 = loadFont(\"Oxanium-Bold\",19)\nlocal font4 = loadFont(\"Oxanium\",13)\nsmallBold=loadFont('Play-Bold',18)\nsmall=loadFont('Play',14)\nsubtext=loadFont('Play',8)\n\n--data to import\nlocal tu_count = ]].. #transfer_units .. [[ \nlocal column = {]]..col_exp..[[}\n-- end data to import\n\n\nfunction renderHeader()\n    h_factor=12\n    h=30\n    addLine(back,0,h,rx,h)\n    addBox(front,0,0,rx,h)\n    addText(front,smallBold,'Monitoring ' ..tu_count .. ' Assembly Lines',25,15)\n    addText(front,small,'Locura Assembly Line Tracker v1.0',rx-220,15)\nend\nfunction renderFooter()\n    local h_factor=0\n    local h=35\n    addLine(back,0,ry-h+h_factor,rx,ry-h+h_factor)\n    addBox(front,0,ry-h-h_factor,rx,h)\n    setNextFillColor(front,0.24,0.25,0.25,1)\n    addText(front,small,'Screen ]]..scr_num ..[[/]]..scr..[[',25,ry-18)\n    addText(front,subtext,'G I T H U B  /  L O C U R A D U',rx-130,ry-18)\nend\n\nrenderHeader()\nrenderFooter()\n\ndiv = rx/#column\nfor d=1,#column-1 do addLine(layer, div*d, 30, div*d, ry-35)  end\n]].. tu_column(column[c],posy,1,68) ..[[ \n]]\n\nc=1 scr_num=2\nscreen_2 = [[\nlocal layer = createLayer()\nlocal back=createLayer()\nsetDefaultStrokeColor(back,Shape_Line,0,0,0,0.5)\nsetDefaultShadow(back,Shape_Line,6,0,0,0,0.5)\nlocal front=createLayer()\nsetDefaultFillColor(front,Shape_Box,0.075,0.125,0.156,1)\nsetDefaultFillColor(front,Shape_Text,0.710,0.878,0.941,1)\nsetDefaultTextAlign(front,AlignH_Left,AlignV_Middle)\nlocal rx, ry = getResolution()\nsetBackgroundColor(15/255,24/255,29/255)\nlocal font = loadFont(\"RobotoCondensed\", 12)\nlocal font2 = loadFont(\"Oxanium-Medium\", 20)\nlocal font3 = loadFont(\"Oxanium-Bold\",19)\nlocal font4 = loadFont(\"Oxanium\",13)\nsmallBold=loadFont('Play-Bold',18)\nsmall=loadFont('Play',14)\nsubtext=loadFont('Play',8)\n\n--data to import\nlocal tu_count = ]].. #transfer_units .. [[ \nlocal column = {]]..col_exp..[[}\n-- end data to import\n\nfunction renderHeader()\n    h_factor=12\n    h=30\n    addLine(back,0,h,rx,h)\n    addBox(front,0,0,rx,h)\n    addText(front,smallBold,'Monitoring ' ..tu_count .. ' Assembly Lines',25,15)\n    addText(front,small,'Locura Assembly Line Tracker v1.0',rx-220,15)\nend\nfunction renderFooter()\n    local h_factor=0\n    local h=35\n    addLine(back,0,ry-h+h_factor,rx,ry-h+h_factor)\n    addBox(front,0,ry-h-h_factor,rx,h)\n    setNextFillColor(front,0.24,0.25,0.25,1)\n    addText(front,small,'Screen ]]..scr_num ..[[/]]..scr..[[',25,ry-18)\n    addText(front,subtext,'G I T H U B  /  L O C U R A D U',rx-130,ry-18)\nend\n\nrenderHeader()\nrenderFooter()\n\ndiv = rx/#column\nfor d=1,#column-1 do addLine(layer, div*d, 30, div*d, ry-50) end\n\n]].. tu_column(column[c],posy,69,136) ..[[ \n]]\nc=1 scr_num=3\nscreen_3 = [[\nlocal layer = createLayer()\nlocal back=createLayer()\nsetDefaultStrokeColor(back,Shape_Line,0,0,0,0.5)\nsetDefaultShadow(back,Shape_Line,6,0,0,0,0.5)\nlocal front=createLayer()\nsetDefaultFillColor(front,Shape_Box,0.075,0.125,0.156,1)\nsetDefaultFillColor(front,Shape_Text,0.710,0.878,0.941,1)\nsetDefaultTextAlign(front,AlignH_Left,AlignV_Middle)\nlocal rx, ry = getResolution()\nsetBackgroundColor(15/255,24/255,29/255)\nlocal font = loadFont(\"RobotoCondensed\", 12)\nlocal font2 = loadFont(\"Oxanium-Medium\", 20)\nlocal font3 = loadFont(\"Oxanium-Bold\",19)\nlocal font4 = loadFont(\"Oxanium\",13)\nsmallBold=loadFont('Play-Bold',18)\nsmall=loadFont('Play',14)\nsubtext=loadFont('Play',8)\n\n--data to import\nlocal tu_count = ]].. #transfer_units .. [[ \nlocal column = {]]..col_exp..[[}\n-- end data to import\n\nfunction renderHeader()\n    h_factor=12\n    h=30\n    addLine(back,0,h,rx,h)\n    addBox(front,0,0,rx,h)\n    addText(front,smallBold,'Monitoring ' ..tu_count .. ' Assembly Lines',25,15)\n    addText(front,small,'Locura Assembly Line Tracker v1.0',rx-220,15)\nend\nfunction renderFooter()\n    local h_factor=0\n    local h=35\n    addLine(back,0,ry-h+h_factor,rx,ry-h+h_factor)\n    addBox(front,0,ry-h-h_factor,rx,h)\n    setNextFillColor(front,0.24,0.25,0.25,1)\n    addText(front,small,'Screen ]]..scr_num ..[[/]]..scr..[[',25,ry-18)\n    addText(front,subtext,'G I T H U B  /  L O C U R A D U',rx-130,ry-18)\nend\n\nrenderHeader()\nrenderFooter()\n\ndiv = rx/#column\nfor d=1,#column-1 do addLine(layer, div*d, 30, div*d, ry-50) end\n\n]].. tu_column(column[c],posy,137,204) ..[[ \n]]\nc=1 scr_num=4\nscreen_4 = [[\nlocal layer = createLayer()\nlocal back=createLayer()\nsetDefaultStrokeColor(back,Shape_Line,0,0,0,0.5)\nsetDefaultShadow(back,Shape_Line,6,0,0,0,0.5)\nlocal front=createLayer()\nsetDefaultFillColor(front,Shape_Box,0.075,0.125,0.156,1)\nsetDefaultFillColor(front,Shape_Text,0.710,0.878,0.941,1)\nsetDefaultTextAlign(front,AlignH_Left,AlignV_Middle)\nlocal rx, ry = getResolution()\nsetBackgroundColor(15/255,24/255,29/255)\nlocal font = loadFont(\"RobotoCondensed\", 12)\nlocal font2 = loadFont(\"Oxanium-Medium\", 20)\nlocal font3 = loadFont(\"Oxanium-Bold\",19)\nlocal font4 = loadFont(\"Oxanium\",13)\nsmallBold=loadFont('Play-Bold',18)\nsmall=loadFont('Play',14)\nsubtext=loadFont('Play',8)\n\n--data to import\nlocal tu_count = ]].. #transfer_units .. [[ \nlocal column = {]]..col_exp..[[}\n-- end data to import\n\nfunction renderHeader()\n    h_factor=12\n    h=30\n    addLine(back,0,h,rx,h)\n    addBox(front,0,0,rx,h)\n    addText(front,smallBold,'Monitoring ' ..tu_count .. ' Assembly Lines',25,15)\n    addText(front,small,'Locura Assembly Line Tracker v1.0',rx-220,15)\nend\nfunction renderFooter()\n    local h_factor=0\n    local h=35\n    addLine(back,0,ry-h+h_factor,rx,ry-h+h_factor)\n    addBox(front,0,ry-h-h_factor,rx,h)\n    setNextFillColor(front,0.24,0.25,0.25,1)\n    addText(front,small,'Screen ]]..scr_num ..[[/]]..scr..[[',25,ry-18)\n    addText(front,subtext,'G I T H U B  /  L O C U R A D U',rx-130,ry-18)\nend\n\nrenderHeader()\nrenderFooter()\n\ndiv = rx/#column\nfor d=1,#column-1 do addLine(layer, div*d, 30, div*d, ry-50) end\n\n]].. tu_column(column[c],posy,205,272) ..[[ \n]]\nc=1 scr_num=5\nscreen_5 = [[\nlocal layer = createLayer()\nlocal back=createLayer()\nsetDefaultStrokeColor(back,Shape_Line,0,0,0,0.5)\nsetDefaultShadow(back,Shape_Line,6,0,0,0,0.5)\nlocal front=createLayer()\nsetDefaultFillColor(front,Shape_Box,0.075,0.125,0.156,1)\nsetDefaultFillColor(front,Shape_Text,0.710,0.878,0.941,1)\nsetDefaultTextAlign(front,AlignH_Left,AlignV_Middle)\nlocal rx, ry = getResolution()\nsetBackgroundColor(15/255,24/255,29/255)\nlocal font = loadFont(\"RobotoCondensed\", 12)\nlocal font2 = loadFont(\"Oxanium-Medium\", 20)\nlocal font3 = loadFont(\"Oxanium-Bold\",19)\nlocal font4 = loadFont(\"Oxanium\",13)\nsmallBold=loadFont('Play-Bold',18)\nsmall=loadFont('Play',14)\nsubtext=loadFont('Play',8)\n\n--data to import\nlocal tu_count = ]].. #transfer_units .. [[ \nlocal column = {]]..col_exp..[[}\n-- end data to import\n\nfunction renderHeader()\n    h_factor=12\n    h=30\n    addLine(back,0,h,rx,h)\n    addBox(front,0,0,rx,h)\n    addText(front,smallBold,'Monitoring ' ..tu_count .. ' Assembly Lines',25,15)\n    addText(front,small,'Locura Assembly Line Tracker v1.0',rx-220,15)\nend\nfunction renderFooter()\n    local h_factor=0\n    local h=35\n    addLine(back,0,ry-h+h_factor,rx,ry-h+h_factor)\n    addBox(front,0,ry-h-h_factor,rx,h)\n    setNextFillColor(front,0.24,0.25,0.25,1)\n    addText(front,small,'Screen ]]..scr_num ..[[/]]..scr..[[',25,ry-18)\n    addText(front,subtext,'G I T H U B  /  L O C U R A D U',rx-130,ry-18)\nend\n\nrenderHeader()\nrenderFooter()\n\ndiv = rx/#column\nfor d=1,#column-1 do addLine(layer, div*d, 30, div*d, ry-50) end\n\n]].. tu_column(column[c],posy,273,340) ..[[ \n]]\nc=1 scr_num=6\nscreen_6 = [[\nlocal layer = createLayer()\nlocal back=createLayer()\nsetDefaultStrokeColor(back,Shape_Line,0,0,0,0.5)\nsetDefaultShadow(back,Shape_Line,6,0,0,0,0.5)\nlocal front=createLayer()\nsetDefaultFillColor(front,Shape_Box,0.075,0.125,0.156,1)\nsetDefaultFillColor(front,Shape_Text,0.710,0.878,0.941,1)\nsetDefaultTextAlign(front,AlignH_Left,AlignV_Middle)\nlocal rx, ry = getResolution()\nsetBackgroundColor(15/255,24/255,29/255)\nlocal font = loadFont(\"RobotoCondensed\", 12)\nlocal font2 = loadFont(\"Oxanium-Medium\", 20)\nlocal font3 = loadFont(\"Oxanium-Bold\",19)\nlocal font4 = loadFont(\"Oxanium\",13)\nsmallBold=loadFont('Play-Bold',18)\nsmall=loadFont('Play',14)\nsubtext=loadFont('Play',8)\n\n--data to import\nlocal tu_count = ]].. #transfer_units .. [[ \nlocal column = {]]..col_exp..[[}\n-- end data to import\n\nfunction renderHeader()\n    h_factor=12\n    h=30\n    addLine(back,0,h,rx,h)\n    addBox(front,0,0,rx,h)\n    addText(front,smallBold,'Monitoring ' ..tu_count .. ' Assembly Lines',25,15)\n    addText(front,small,'Locura Assembly Line Tracker v1.0',rx-220,15)\nend\nfunction renderFooter()\n    local h_factor=0\n    local h=35\n    addLine(back,0,ry-h+h_factor,rx,ry-h+h_factor)\n    addBox(front,0,ry-h-h_factor,rx,h)\n    setNextFillColor(front,0.24,0.25,0.25,1)\n    addText(front,small,'Screen ]]..scr_num ..[[/]]..scr..[[',25,ry-18)\n    addText(front,subtext,'G I T H U B  /  L O C U R A D U',rx-130,ry-18)\nend\n\nrenderHeader()\nrenderFooter()\n\ndiv = rx/#column\nfor d=1,#column-1 do addLine(layer, div*d, 30, div*d, ry-50) end\n\n]].. tu_column(column[c],posy,341,408) ..[[ \n]]\n\nfor ss=1, scr do \n    if ss == 1 then screens[1].setRenderScript(screen_1)\n    elseif ss == 2 then screens[2].setRenderScript(screen_2)\n    elseif ss == 3 then screens[3].setRenderScript(screen_3)\n    elseif ss == 4 then screens[4].setRenderScript(screen_4)\n    elseif ss == 5 then screens[5].setRenderScript(screen_5)  \n    elseif ss == 6 then screens[6].setRenderScript(screen_6)\n    end    \nend\n\n\n","filter":{"args":[{"value":"test"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"0"},{"code":"Refresh = 2 --export: Screen refresh timer in seconds\n\nunit.setTimer(\"test\",Refresh)\n\n\n\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"1"},{"code":"local T=text\n\n\nif string.find(T,\"help\") then\n system.print(\"--- Industry locator ---\")   \n system.print(\"Syntax:\")\n system.print(\"transfer [number]\")\n system.print(\"ex: transfer 53\")\n system.print(\"\")\n system.print(\"to clear an arrow type: clear [index]\")\n system.print(\"ex: clear 18\")\n end\n\nif string.find(T,\"clear\") then\n    str = string.gsub(T, \"clear\" ,\"\")\n core.deleteSticker(tonumber(str))\n end\n\nif string.find(T, \"transfer\") then\n   str = string.gsub(T, \"transfer\",\"\")\n   iid = tonumber(str)\n   c_pos = core.getElementPositionById(transfer_units[iid])\n   system.print(\"Arrow added. Index : \" .. core.spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n end\n ","filter":{"args":[{"variable":"*"}],"signature":"onInputText(text)","slotKey":"-4"},"key":"2"},{"code":"--for s=1 ,#screens do screens[s].deactivate() end","filter":{"args":[],"signature":"onStop()","slotKey":"-5"},"key":"3"},{"code":"core=\"\"\nscreens = {}\nTUs = \"\"\nscr = 1\nsystem.print(\"Locura Assembly Line Monitor v1.0\")\nsystem.print(\"type help for available commands\")\n\nfor slot_name, slot in pairs(unit) do\n    if type(slot) == \"table\"\n        and type(slot.export) == \"table\"\n        and slot.getClass\n    then\n        slot.slotname = slot_name\n        if slot.getClass():lower():find('screenunit') then \n            table.insert(screens,slot)\n            slot.activate()\n        elseif slot.getClass():lower():find('coreunit') then core=slot\n        end\n    end\nend\n\nif #screens == 0 then system.print(\"No screen detected\")\nelse\n    table.sort(screens, function(a,b) return a.slotname < b.slotname end)\n    local plural = \"\"\n    if #screens > 1 then plural = \"s\" end\n    system.print(#screens .. \" screen\" .. plural .. \" connected.\")\nend\n\nif core == \"\" then\n    system.print(\"No core connected! Ending script.\") unit.exit() else system.print(\"Core connected\")\nend\n\nelementIdList = core.getElementIdList()\ntransfer_units = {}\n\nfor index,id in ipairs(elementIdList) do\n    elementType = core.getElementDisplayNameById(id):lower()\n    if (elementType:find(\"assembly line\")) then table.insert(transfer_units,id) end\nend    \n   \nif #transfer_units < 9 then scr = 1\n        elseif #transfer_units < 19 then scr = 2 end\n\nscr = math.ceil(#transfer_units/68)    \nsystem.print (\"Screens needed: \" .. scr)","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"4"}],"methods":[],"events":[]}
